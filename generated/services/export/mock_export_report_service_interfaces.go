// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/export/export_report_service.go

// Package mockexportreportservice is a generated GoMock package.
package mockexportreportservice

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/habbas99/dexory/internal/models"
)

// MockexportReportRecordClient is a mock of exportReportRecordClient interface.
type MockexportReportRecordClient struct {
	ctrl     *gomock.Controller
	recorder *MockexportReportRecordClientMockRecorder
}

// MockexportReportRecordClientMockRecorder is the mock recorder for MockexportReportRecordClient.
type MockexportReportRecordClientMockRecorder struct {
	mock *MockexportReportRecordClient
}

// NewMockexportReportRecordClient creates a new mock instance.
func NewMockexportReportRecordClient(ctrl *gomock.Controller) *MockexportReportRecordClient {
	mock := &MockexportReportRecordClient{ctrl: ctrl}
	mock.recorder = &MockexportReportRecordClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexportReportRecordClient) EXPECT() *MockexportReportRecordClientMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockexportReportRecordClient) Update(exportReportRecord *models.ExportReportRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", exportReportRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockexportReportRecordClientMockRecorder) Update(exportReportRecord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockexportReportRecordClient)(nil).Update), exportReportRecord)
}

// MockcomparisonDataClient is a mock of comparisonDataClient interface.
type MockcomparisonDataClient struct {
	ctrl     *gomock.Controller
	recorder *MockcomparisonDataClientMockRecorder
}

// MockcomparisonDataClientMockRecorder is the mock recorder for MockcomparisonDataClient.
type MockcomparisonDataClientMockRecorder struct {
	mock *MockcomparisonDataClient
}

// NewMockcomparisonDataClient creates a new mock instance.
func NewMockcomparisonDataClient(ctrl *gomock.Controller) *MockcomparisonDataClient {
	mock := &MockcomparisonDataClient{ctrl: ctrl}
	mock.recorder = &MockcomparisonDataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcomparisonDataClient) EXPECT() *MockcomparisonDataClientMockRecorder {
	return m.recorder
}

// GetAllPaginated mocks base method.
func (m *MockcomparisonDataClient) GetAllPaginated(reportRecordID uint, limit, offset int) ([]models.ComparisonData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaginated", reportRecordID, limit, offset)
	ret0, _ := ret[0].([]models.ComparisonData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaginated indicates an expected call of GetAllPaginated.
func (mr *MockcomparisonDataClientMockRecorder) GetAllPaginated(reportRecordID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaginated", reflect.TypeOf((*MockcomparisonDataClient)(nil).GetAllPaginated), reportRecordID, limit, offset)
}
