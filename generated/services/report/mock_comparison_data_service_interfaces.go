// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/report/comparison_data_service.go

// Package mockcomparisondataservice is a generated GoMock package.
package mockcomparisondataservice

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/habbas99/dexory/internal/models"
)

// MockScanClient is a mock of ScanClient interface.
type MockScanClient struct {
	ctrl     *gomock.Controller
	recorder *MockScanClientMockRecorder
}

// MockScanClientMockRecorder is the mock recorder for MockScanClient.
type MockScanClientMockRecorder struct {
	mock *MockScanClient
}

// NewMockScanClient creates a new mock instance.
func NewMockScanClient(ctrl *gomock.Controller) *MockScanClient {
	mock := &MockScanClient{ctrl: ctrl}
	mock.recorder = &MockScanClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanClient) EXPECT() *MockScanClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockScanClient) Get(bulkScanRecordID uint, location string) (*models.Scan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", bulkScanRecordID, location)
	ret0, _ := ret[0].(*models.Scan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockScanClientMockRecorder) Get(bulkScanRecordID, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockScanClient)(nil).Get), bulkScanRecordID, location)
}

// MockComparisonDataClient is a mock of ComparisonDataClient interface.
type MockComparisonDataClient struct {
	ctrl     *gomock.Controller
	recorder *MockComparisonDataClientMockRecorder
}

// MockComparisonDataClientMockRecorder is the mock recorder for MockComparisonDataClient.
type MockComparisonDataClientMockRecorder struct {
	mock *MockComparisonDataClient
}

// NewMockComparisonDataClient creates a new mock instance.
func NewMockComparisonDataClient(ctrl *gomock.Controller) *MockComparisonDataClient {
	mock := &MockComparisonDataClient{ctrl: ctrl}
	mock.recorder = &MockComparisonDataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComparisonDataClient) EXPECT() *MockComparisonDataClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockComparisonDataClient) Create(comparisonData *models.ComparisonData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", comparisonData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockComparisonDataClientMockRecorder) Create(comparisonData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockComparisonDataClient)(nil).Create), comparisonData)
}

// MockReportRecordClient is a mock of ReportRecordClient interface.
type MockReportRecordClient struct {
	ctrl     *gomock.Controller
	recorder *MockReportRecordClientMockRecorder
}

// MockReportRecordClientMockRecorder is the mock recorder for MockReportRecordClient.
type MockReportRecordClientMockRecorder struct {
	mock *MockReportRecordClient
}

// NewMockReportRecordClient creates a new mock instance.
func NewMockReportRecordClient(ctrl *gomock.Controller) *MockReportRecordClient {
	mock := &MockReportRecordClient{ctrl: ctrl}
	mock.recorder = &MockReportRecordClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportRecordClient) EXPECT() *MockReportRecordClientMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockReportRecordClient) Update(reportRecord *models.ReportRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", reportRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockReportRecordClientMockRecorder) Update(reportRecord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReportRecordClient)(nil).Update), reportRecord)
}
